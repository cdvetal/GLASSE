# -*- coding: utf-8 -*-
"""CÃ³pia de images_grid.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MFE6lJvyCIhEdB6wg9g_wi5Hr6_QoVlO
"""

import pandas as pd
from tensorflow.keras import layers
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
import tensorflow.keras.backend as k
import re
import csv
import cv2
from PIL import Image
import os
"""##Cond GAN"""

# Conditional GAN
batch_size = 64
num_channels = 1
num_classes = 10
image_size = 28
latent_dim = 128

path_weights = './weights/'

generator_in_channels = latent_dim + num_classes
discriminator_in_channels = num_channels + num_classes

# Create the discriminator.
discriminator = tf.keras.Sequential(
    [
        tf.keras.layers.InputLayer((28, 28, discriminator_in_channels)),
        layers.Conv2D(64, (3, 3), strides=(2, 2), padding="same"),
        layers.LeakyReLU(alpha=0.2),
        layers.Conv2D(128, (3, 3), strides=(2, 2), padding="same"),
        layers.LeakyReLU(alpha=0.2),
        layers.GlobalMaxPooling2D(),
        layers.Dense(1),
    ],
    name="discriminator",
)

# Create the generator.
generator = tf.keras.Sequential(
    [
        tf.keras.layers.InputLayer((generator_in_channels,)),
        # We want to generate 128 + num_classes coefficients to reshape into a
        # 7x7x(128 + num_classes) map.
        layers.Dense(7 * 7 * generator_in_channels),
        layers.LeakyReLU(alpha=0.2),
        layers.Reshape((7, 7, generator_in_channels)),
        layers.Conv2DTranspose(128, (4, 4), strides=(2, 2), padding="same"),
        layers.LeakyReLU(alpha=0.2),
        layers.Conv2DTranspose(128, (4, 4), strides=(2, 2), padding="same"),
        layers.LeakyReLU(alpha=0.2),
        layers.Conv2D(1, (7, 7), padding="same", activation="sigmoid"),
    ],
    name="generator",
)

class ConditionalGAN(tf.keras.Model):
    def __init__(self, discriminator, generator, latent_dim):
        super(ConditionalGAN, self).__init__()
        self.discriminator = discriminator
        self.generator = generator
        self.latent_dim = latent_dim
        self.gen_loss_tracker = tf.keras.metrics.Mean(name="generator_loss")
        self.disc_loss_tracker = tf.keras.metrics.Mean(name="discriminator_loss")

    @property
    def metrics(self):
        return [self.gen_loss_tracker, self.disc_loss_tracker]

    def compile(self, d_optimizer, g_optimizer, loss_fn):
        super(ConditionalGAN, self).compile()
        self.d_optimizer = d_optimizer
        self.g_optimizer = g_optimizer
        self.loss_fn = loss_fn

    def train_step(self, data):
        # Unpack the data.
        real_images, one_hot_labels = data

        # Add dummy dimensions to the labels so that they can be concatenated with
        # the images. This is for the discriminator.
        image_one_hot_labels = one_hot_labels[:, :, None, None]
        image_one_hot_labels = tf.repeat(
            image_one_hot_labels, repeats=[image_size * image_size]
        )
        image_one_hot_labels = tf.reshape(
            image_one_hot_labels, (-1, image_size, image_size, num_classes)
        )

        # Sample random points in the latent space and concatenate the labels.
        # This is for the generator.
        batch_size = tf.shape(real_images)[0]
        random_latent_vectors = tf.random.normal(shape=(batch_size, self.latent_dim))
        random_vector_labels = tf.concat(
            [random_latent_vectors, one_hot_labels], axis=1
        )

        # Decode the noise (guided by labels) to fake images.
        generated_images = self.generator(random_vector_labels)

        # Combine them with real images. Note that we are concatenating the labels
        # with these images here.
        fake_image_and_labels = tf.concat([generated_images, image_one_hot_labels], -1)
        real_image_and_labels = tf.concat([real_images, image_one_hot_labels], -1)
        combined_images = tf.concat(
            [fake_image_and_labels, real_image_and_labels], axis=0
        )

        # Assemble labels discriminating real from fake images.
        labels = tf.concat(
            [tf.ones((batch_size, 1)), tf.zeros((batch_size, 1))], axis=0
        )

        # Train the discriminator.
        with tf.GradientTape() as tape:
            predictions = self.discriminator(combined_images)
            d_loss = self.loss_fn(labels, predictions)
        grads = tape.gradient(d_loss, self.discriminator.trainable_weights)
        self.d_optimizer.apply_gradients(
            zip(grads, self.discriminator.trainable_weights)
        )

        # Sample random points in the latent space.
        random_latent_vectors = tf.random.normal(shape=(batch_size, self.latent_dim))
        random_vector_labels = tf.concat(
            [random_latent_vectors, one_hot_labels], axis=1
        )

        # Assemble labels that say "all real images".
        misleading_labels = tf.zeros((batch_size, 1))

        # Train the generator (note that we should *not* update the weights
        # of the discriminator)!
        with tf.GradientTape() as tape:
            fake_images = self.generator(random_vector_labels)
            fake_image_and_labels = tf.concat([fake_images, image_one_hot_labels], -1)
            predictions = self.discriminator(fake_image_and_labels)
            g_loss = self.loss_fn(misleading_labels, predictions)
        grads = tape.gradient(g_loss, self.generator.trainable_weights)
        self.g_optimizer.apply_gradients(zip(grads, self.generator.trainable_weights))

        # Monitor loss.
        self.gen_loss_tracker.update_state(g_loss)
        self.disc_loss_tracker.update_state(d_loss)
        return {
            "g_loss": self.gen_loss_tracker.result(),
            "d_loss": self.disc_loss_tracker.result(),
        }

cond_gan = ConditionalGAN(
    discriminator=discriminator, generator=generator, latent_dim=latent_dim
)

cond_gan.generator.load_weights(f'{path_weights}/cond_gan_gen_weights.h5')
cond_gan.discriminator.load_weights(f'{path_weights}/cond_gan_dis_weights.h5')


def make_images_vector(number, run, list_vector):
  len_list = len(list_vector)

  for i in range(len_list):
    vector = np.array([list_vector[i]])
    noise = k.constant(vector)
    noise_and_labels = tf.concat([noise, label], 1)

    # ind image
    test_image = cond_gan.generator.predict(noise_and_labels)
    fig = plt.figure(frameon=False)
    plt.imshow(test_image[0, :, :, 0], cmap='gray')
    plt.axis('off')
    plt.savefig(f"./adversarial_images/run_{run}/no_format/{number}_run{run}_gen{gen_list[i]}_ind_{ind_list[i]}", bbox_inches='tight', pad_inches=0, transparent=True)
    plt.close()

    img = Image.open(f"./adversarial_images/run_{run}/no_format/{number}_run{run}_gen{gen_list[i]}_ind_{ind_list[i]}.png")
    img = img.resize((28, 28), Image.ANTIALIAS)
    img.save(f"./adversarial_images/run_{run}/mnist_format/{number}_run{run}_gen{gen_list[i]}_ind_{ind_list[i]}.png")

  return

new_folder = './output'
mode = 0o777
target = 0.5

for number in range(0, 10):
    label = tf.keras.utils.to_categorical([number], num_classes)
    label = tf.cast(label, tf.float32)
    print(number)
    for run in range(1, 16):
        adv_img = os.path.join(new_folder, "adversarial_images")
        isExist = os.path.exists(adv_img)
        if not isExist:
        # Create a new directory because it does not exist
            os.mkdir(adv_img, mode)

        adv_img_run = os.path.join(adv_img, f"run_{run}")
        isExist = os.path.exists(adv_img_run)
        if not isExist:
            os.mkdir(adv_img_run, mode)

        no_format = os.path.join(adv_img_run,"no_format")
        isExist = os.path.exists(no_format)
        if not isExist:
            os.mkdir(no_format, mode)

        mnist_format = os.path.join(adv_img_run,"mnist_format")
        isExist = os.path.exists(mnist_format)
        if not isExist:
            os.mkdir(mnist_format, mode)

        path_results = f"{new_folder}/results_digit_{number}_run_{run}"
        adv_file = f"{path_results}/summary/adv.csv"
        
        df = pd.read_csv(adv_file)
        df_filtered = df[df['fake_loss'] < target + 0.01]
        df_filtered = df_filtered[df_filtered['fake_loss'] > target - 0.01]

        vector_list = list(df_filtered['vector'])
        ind_list = list(df_filtered['ind'])
        gen_list = list(df_filtered['generation'])

        numeric_const_pattern = '[-+]? (?: (?: \d* \. \d+ ) | (?: \d+ \.? ) )(?: [Ee] [+-]? \d+ ) ?'
        rx = re.compile(numeric_const_pattern, re.VERBOSE)

        vector_list = [[float(gene) for gene in rx.findall(vector)] for vector in vector_list]

        make_images_vector(number, run, vector_list)